import type { GetKeyPaths } from '../get-key-paths/index.tzen'
import type { FlattenKeyPaths } from '../_internal.tzen'

type _Handle<
  CurO: object, 
  // ['a', '3', 'c']
  CurKeyPaths: Array<string>
> = ^{
  if (CurKeyPaths == [infer Key, ...infer RestKeyPaths]) {
    if (CurO == { [k in Key]: infer Value }) {
      if (RestKeyPaths['length'] == 0) {
        return Value
      } else {
        return _Handle<Value, RestKeyPaths>
      }
    }
  }
}


export type GetProperty<
  O: object,
  KeyPath: GetKeyPaths<O, { mode: 'string' }>
> = ^{
  for (infer Item in KeyPath) {
    return _Handle<O, FlattenKeyPaths<KeyPath>>   
  }
}