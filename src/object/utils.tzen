export type IsNullableKey<O: object, K: keyof O> = ^{
  type IsNullable = {
    [_K in K]-?: ^{
      type Result = O[K] & null

      return [Result] == [never] ? never : _K
    }
  }[K]

  return [IsNullable] == [never] ? false : true
}

export type IsUndefinedKey<O: object, K: keyof O> = ^{
  type IsNullable = {
    [_K in K]-?: ^{
      type Result = O[K] & undefined

      return [Result] == [never] ? never : _K
    }
  }[K]

  return [IsNullable] == [never] ? false : true
}

