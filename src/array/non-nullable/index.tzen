import type { Equal } from '../../utils.tzen'
import type * as Union from '../../union'

type _HandleTuple<
  CurTuple: ReadonlyArray<any>,
  Output: ReadonlyArray<any> = []
> = ^{
  if (CurTuple == [infer H, ...infer T]) {
    type NonNullableValue = NonNullable<H>
    type NewOutput = Equal<NonNullableValue, never> == true ? Output : [...Output, NonNullableValue]

    return _HandleTuple<T, NewOutput>
  } 
  // CurTuple = [1?], CurTuple['length'] = 0 | 1
  else if (Union.Has<CurTuple['length'], 1> == true) {
    return [...Output, NonNullable<CurTuple[0]>]
  } else {
    return Output
  }
}
  

type _NonNullable<Arr: Array<any>> = ^{
  if (Equal<Arr['length'], number> == true) {
    if (Arr == Array<infer T>) {
      return Array<NonNullable<T>>
    }
  } else {
    return _HandleTuple<Arr>
  }
}


export type { _NonNullable as NonNullable };