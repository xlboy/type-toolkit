import type { Pop } from '../../array/pop/index.tzen'
import type { Cast } from '../../utils.tzen'

type __Split<Str: string, Separator: string, T: string[] = []> = ^{
  if (Str == `${infer BS}${Separator}${infer AS}`) {
    return __Split<AS, Separator, [...T, BS]>
  } else {
    return [...T, Str]
  }
}

type _Split<Str: string, Separator: string> = ^{
  type Result = __Split<Str, Separator>

  return Separator == '' ? Pop<Result> : Result
}

export type Split<Str: string, Separator: string = ''> = ^{
  for (infer X in _Split<Str, Separator>) {
    return Cast<X, string[]>
  }
}